name: Deploy PalmotiÄ‡eva Sanctuary to Google Cloud Run

on:
  push:
    branches:
      - main # Or 'master', or your primary deployment branch

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ARTIFACT_REGISTRY_LOCATION: ${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }} # e.g., europe-west1
  GCP_ARTIFACT_REPO_NAME: ${{ secrets.GCP_ARTIFACT_REPO_NAME }} # e.g., palmoticeva-app-repo
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }} # e.g., palmoticeva-sanctuary
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }} # e.g., europe-west1
  # IMAGE_NAME format: location-docker.pkg.dev/project-id/repo-name/service-name:commit-sha
  IMAGE_NAME: ${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}

jobs:
  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint for Workload Identity Federation.
    # If using Service Account Keys, 'id-token' might not be strictly necessary but good practice.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        # Using the Service Account Key JSON stored in GitHub Secrets.
        # For enhanced security, consider Workload Identity Federation.
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud
      # This command configures Docker to authenticate with Artifact Registry
      # using the credentials obtained in the 'Authenticate to Google Cloud' step.
      run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

    - name: Build Docker image
      # Builds the Docker image using the Dockerfile in the root of your repository.
      # The image is tagged with the IMAGE_NAME defined in the 'env' section.
      run: docker build -t ${{ env.IMAGE_NAME }} .

    - name: Push Docker image to Artifact Registry
      # Pushes the built Docker image to your Google Artifact Registry.
      run: docker push ${{ env.IMAGE_NAME }}

    - name: Deploy to Cloud Run
      uses: 'google-github-actions/deploy-cloudrun@v2'
      with:
        service: ${{ env.CLOUD_RUN_SERVICE_NAME }}
        region: ${{ env.CLOUD_RUN_REGION }}
        image: ${{ env.IMAGE_NAME }}
        # Environment variables to be set in the Cloud Run service.
        # API_KEY is taken from GitHub Secrets.
        # PORT must match the port your application listens on inside the container (defined in Dockerfile and package.json start script).
        env_vars: |
          API_KEY=${{ secrets.API_KEY }}
          PORT=8080
        # The '--allow-unauthenticated' flag makes the service publicly accessible.
        # Remove this if you intend to control access via IAM.
        flags: '--allow-unauthenticated'
        # If the service doesn't exist, Cloud Run will create it.
        # Ensure your service account has permissions to create services.

    - name: Output Cloud Run URL
      # Retrieves and prints the URL of the deployed Cloud Run service.
      if: success() # Only run if previous steps were successful
      run: echo "Deployed to: $(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE_NAME }} --platform managed --region ${{ env.CLOUD_RUN_REGION }} --format 'value(status.url)')"